#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Parametrizaci√≥n de Direcciones - Men√∫ Principal
Versi√≥n optimizada con interfaz mejorada y funcionalidades avanzadas
"""

import os
import sys
import time
from pathlib import Path
from datetime import datetime
from typing import Optional, List

# Importar m√≥dulos propios
try:
    from excel_processor import ExcelAddressProcessor
    from address_parser import OptimizedAddressParser 
    from automatismo import AddressAutomation
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("   Aseg√∫rese de que todos los m√≥dulos necesarios est√©n instalados.")
    sys.exit(1)

def main():
    try:
        print("üöÄ Iniciando Sistema de Parametrizaci√≥n de Direcciones")
        print("=" * 60)
        
        # Inicializar el procesador de Excel
        processor = ExcelAddressProcessor()
        
        # Nombre del archivo Excel a procesar
        excel_file = "Backlog_GPON_FILTRADO.xlsx"
        
        # Verificar si el archivo existe
        if not os.path.exists(excel_file):
            # Intentar con archivo alternativo
            excel_file = "Backlog250525-filtradocobertura.xlsx"
            if not os.path.exists(excel_file):
                print(f"‚ùå Error: No se encontr√≥ ning√∫n archivo Excel v√°lido")
                print("   Archivos buscados:")
                print("   - Backlog_GPON_FILTRADO.xlsx")
                print("   - Backlog250525-filtradocobertura.xlsx")
                sys.exit(1)
        
        print(f"üìÇ Archivo encontrado: {excel_file}")
        print(f"üìä Iniciando procesamiento...")
        print("-" * 50)
        
        # Procesar el archivo Excel
        result = processor.process_excel_file(excel_file)
        
        if not result:
            print("\n‚ùå Error: El procesamiento del Excel no se complet√≥ correctamente")
            sys.exit(1)
        
        # Extraer direcciones parametrizadas desde la columna "Parametrizaci√≥n"
        print("\nüîç Extrayendo direcciones parametrizadas...")
        parametrized_addresses = processor.get_addresses_from_column(excel_file, column='Parametrizaci√≥n')
        
        if not parametrized_addresses:
            # Si no hay direcciones en Parametrizaci√≥n, intentar procesarlas desde otra columna
            print("‚ö†Ô∏è  No se encontraron direcciones en la columna 'Parametrizaci√≥n'")
            print("üîÑ Intentando procesar direcciones desde address_parser...")
            
            # Usar el parser para extraer y parametrizar direcciones
            parser = OptimizedAddressParser()
            parametrized_addresses = parser.process_addresses_from_excel(excel_file, 'Parametrizaci√≥n')
            
            if not parametrized_addresses:
                print("‚ùå Error: No se pudieron obtener direcciones v√°lidas")
                sys.exit(1)
        
        print(f"‚úÖ Se encontraron {len(parametrized_addresses)} direcciones para procesar")
        print("\nüìã Primeras 5 direcciones a procesar:")
        for i, addr in enumerate(parametrized_addresses[:5], 1):
            print(f"   {i}. {addr}")
        
        if len(parametrized_addresses) > 5:
            print(f"   ... y {len(parametrized_addresses) - 5} m√°s")
        
        # Confirmar ejecuci√≥n
        print(f"\nü§ñ Iniciando automatizaci√≥n con Selenium...")
        print("   ‚ö†Ô∏è  Aseg√∫rese de que Firefox est√© instalado")
        print("   ‚ö†Ô∏è  No mueva el mouse durante la automatizaci√≥n")
        print("-" * 50)
        
        # Esperar confirmaci√≥n del usuario
        try:
            response = input("\n¬øDesea continuar con la automatizaci√≥n? (s/n): ").lower().strip()
            if response != 's':
                print("‚ùå Automatizaci√≥n cancelada por el usuario")
                sys.exit(0)
        except KeyboardInterrupt:
            print("\n‚ùå Automatizaci√≥n cancelada por el usuario")
            sys.exit(0)
        
        # Ejecutar automatizaci√≥n
        print("\nüîÑ Ejecutando automatizaci√≥n...")
        automation = AddressAutomation(parametrized_addresses)
        
        print("‚úÖ Automatizaci√≥n completada exitosamente")
        
    except KeyboardInterrupt:
        print("\n‚ùå Programa interrumpido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()