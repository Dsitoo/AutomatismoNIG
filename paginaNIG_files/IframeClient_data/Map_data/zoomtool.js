/** Map tool which draws a selection box on the map for zooming the map. */

function initZoomTool(clientId) {
}

function releaseZoomTool(clientId) {
}

ZoomTool = {
	layer : null,
	map : null,
	zoomBox : null,
	startPoint : null,
	endPoint : null,
	zoomInMode : true,
	
	/**
	 * Activates the tool.
	 * @param clientId identifies the map and its layers.
	 */
	activate : function(clientId) {
		this.map = Map.getMap(clientId);
		this.layer = this.map.toolsLayer;
		var xamlFragment = "<Rectangle Name='zoomBox' Stroke='blue' StrokeThickness='2' />";
		this.zoomBox = this.map.silverlightContent.createFromXaml(xamlFragment, false);
	},
	
	/** Deactivates the tool. */
	deactivate : function(clientId) {
	},
	/**
	 * Handles the mouseDown action.
	 */
	handleMouseDown : function(clientId, point) {
		this.startPoint.moveTo(point.x, point.y);
		this.zoomBox["Canvas.Left"] = this.startPoint.x;
		this.zoomBox["Canvas.Top"]  = this.startPoint.y;
		this.zoomBox.Width = 0;
		this.zoomBox.Height = 0;
		this.layer.Children.Add(this.zoomBox);
	},
		
	/**
	 * Handles the mouseMove action.
	 */
	handleMouseMove : function(clientId, point) {
		this.zoomBox["Canvas.Left"] =  Math.min(point.x, this.startPoint.x);
		this.zoomBox["Canvas.Top"]  =  Math.min(point.y, this.startPoint.y);
		this.zoomBox.Width  = Math.abs(point.x - this.startPoint.x);
		this.zoomBox.Height = Math.abs(point.y - this.startPoint.y);
	},
	/**
	 * Handles the mouseUp action.
	 */
	handleMouseUp : function(clientId, point) {
		this.endPoint.moveTo(point.x, point.y);
		this.layer.Children.remove(this.zoomBox);
		this.submit(clientId);
	},
	/**
	* Submits the tool data to the server. 
	* Collects the relevant data (start and end position etc.) to be submitted.
	* Calls the map's submit method.
	 */
	submit : function(clientId) {
		if (this.map) {
			var parameters = {
				startX: this.startPoint.x,
				startY: this.startPoint.y,
				endX: this.endPoint.x,
				endY: this.endPoint.y,
				mode: this.zoomInMode ? "zoomin" : "zoomout"
			};
			// Submit the form 
			this.map.submit("zoom",parameters);
	}
}
};

ZoomTool.startPoint = new DynPoint(0,0);
ZoomTool.endPoint = new DynPoint(0,0);
/**
 * Adds the activateZoomInTool to the map.
 * That function will activate this tool (zoomInTool). 
 * Calls to this method will be generated by the updater class ZoomToolUpdater.
 */
Map.prototype.activateZoomInTool = function() {
	ZoomTool.zoomInMode = true;
	this.activateTool(ZoomTool);
    this.setCursor("cursor_zoom_in.png");
};

/**
 * Adds the activateZoomOutTool to the map.
 * That function will activate this tool (zoomOutTool).
 */
Map.prototype.activateZoomOutTool = function() {
	ZoomTool.zoomInMode = false;
	this.activateTool(ZoomTool);
    this.setCursor("cursor_zoom_out.png");
};
